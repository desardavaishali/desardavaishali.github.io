<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agileqa on Becoming a better Tester!</title>
    <link>https://www.vaishalidesarda.com/tags/agileqa/</link>
    <description>Recent content in agileqa on Becoming a better Tester!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 17:30:00 +0000</lastBuildDate><atom:link href="https://www.vaishalidesarda.com/tags/agileqa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conducting Effective Exploratory Testing!</title>
      <link>https://www.vaishalidesarda.com/quality/conducting_exploratory/</link>
      <pubDate>Sun, 07 Jul 2019 17:30:00 +0000</pubDate>
      
      <guid>https://www.vaishalidesarda.com/quality/conducting_exploratory/</guid>
      <description>With the interest to know more, for the curiosity to discover, we explore&amp;hellip; Roads, Code, Apps.. Exploratory testing is all about discovering the unknown. I have written before on why we should conduct exploratory testing.
Let’s discuss what to bear in mind when conducting effective Exploratory Testing!
There are quite a few misconceptions when it comes to how Exploratory testing is conducted. It’s not the same as exploring the roads. We are not wanderers when we explore the app.</description>
    </item>
    
    <item>
      <title>Why should you pay for a QA when you have automated tests?</title>
      <link>https://www.vaishalidesarda.com/insights/why_should_you_pay_qa_when_you_have_automation/</link>
      <pubDate>Sun, 13 Jan 2019 16:00:30 +0000</pubDate>
      
      <guid>https://www.vaishalidesarda.com/insights/why_should_you_pay_qa_when_you_have_automation/</guid>
      <description>Customer/Client: “We are now agile. There is no QA in an agile team. Developers can do their own testing. Why should I pay for a QA? I don’t need one!”
These days Developers build automated tests and integrate code-based tests as well by using various frameworks (e.g. mocks). Some developers follow the Test Driven Development approach and code all the tests, find where their fix breaks the code, as they don’t like QA finding the defects.</description>
    </item>
    
    <item>
      <title>Service Virtualization - When integration points are a dependency for development</title>
      <link>https://www.vaishalidesarda.com/quality/service_virtualisation_integration_dependancy/</link>
      <pubDate>Fri, 16 Nov 2018 17:30:00 +0000</pubDate>
      
      <guid>https://www.vaishalidesarda.com/quality/service_virtualisation_integration_dependancy/</guid>
      <description>Being dependent on is nothing but relying upon. One has to wait for that other thing to get the task at hand started/completed.
If Dependencies are not resolved or not made available, the task cannot be started/completed.
If dependencies are made available, much of the testing from QA &amp;amp; Dev at a component level, Unit level, can “shift left,” or be moved earlier in the SDLC. This is because each component can be tested individually instead of waiting for complete assembly.</description>
    </item>
    
    <item>
      <title>Why Acceptance Criteria!</title>
      <link>https://www.vaishalidesarda.com/quality/why_acceptance_criteria/</link>
      <pubDate>Sun, 11 Nov 2018 17:30:00 +0000</pubDate>
      
      <guid>https://www.vaishalidesarda.com/quality/why_acceptance_criteria/</guid>
      <description>The Final product should work as expected.
Everyone wants to create the product that customers (and their customers) love. The product should be:
 As per customer’s expectation - Solution Fit &amp;amp; Market Fit Defect-free Early to market / without delays Within budget Changes post-go-live should be based on further feedback from customers  Is it possible to achieve all above? Yes - With the help of acceptance criteria!!
Acceptance criteria =</description>
    </item>
    
    <item>
      <title>Finding Defects V s Preventing Defects</title>
      <link>https://www.vaishalidesarda.com/quality/finding_defects_preventing_defects/</link>
      <pubDate>Wed, 07 Nov 2018 17:30:00 +0000</pubDate>
      
      <guid>https://www.vaishalidesarda.com/quality/finding_defects_preventing_defects/</guid>
      <description>Finding defects involves verifying after the software is created. Fixing defects involves re-doing the faulty code and then re-testing everything to ensure that the fix is in place and that nothing else got broken. This takes time and money. Preventing defects is easier, and needn&amp;rsquo;t take a lot of upfront analysis either if certain practices are followed.
Prevention is better than cure. Preventing the defects before the product is built (coding phase) helps deliver business value earlier.</description>
    </item>
    
  </channel>
</rss>
