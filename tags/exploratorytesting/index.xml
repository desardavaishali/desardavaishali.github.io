<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploratorytesting on Becoming a better Tester!</title>
    <link>http://localhost:1313/tags/exploratorytesting/</link>
    <description>Recent content in Exploratorytesting on Becoming a better Tester!</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jul 2020 19:30:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/exploratorytesting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When Should We Stop Testing</title>
      <link>http://localhost:1313/insights/when-should-we-stop-testing/</link>
      <pubDate>Sat, 11 Jul 2020 19:30:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/when-should-we-stop-testing/</guid>
      <description>After reading this headline, you must be thinking “why does one need to write an article on this! It’s straightforward - Your test cases are passed, there are no open high priority or high severity bugs, the story is signed off by PO and you are done!”&#xA;No, my friend.&#xA;There is more to this.&#xA;To ensure that the application “meets the requirements” and also to ensure that “earlier requirements that were met, have not been undone”, one takes the approach of validating that the requirements of the software are known and are being met.</description>
    </item>
    <item>
      <title>Why a QA should know the business domain and the architecture.</title>
      <link>http://localhost:1313/insights/why_qa_should_know_the_business_domain_architecture/</link>
      <pubDate>Sat, 21 Sep 2019 17:00:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/why_qa_should_know_the_business_domain_architecture/</guid>
      <description>Whenever I get started on a new project, I first learn the business domain and the architecture, and only then start to look into the stories.&#xA;Some of the managers I worked with find it unnecessary, thinking “ What would a QA do with an understanding of the architecture?? QA should just go to User story and sign it off after validating the Acceptance Criteria (AC)”.&#xA;In my experience, knowing the architecture and the business domain helps a QA identify much more hidden errors in the whole end to end flow, can give you more understanding and confidence on the product when you know it all.</description>
    </item>
    <item>
      <title>How to be a good QA!</title>
      <link>http://localhost:1313/insights/how_to_be_a_good_qa/</link>
      <pubDate>Sun, 24 Mar 2019 10:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/how_to_be_a_good_qa/</guid>
      <description>I know.. You must be thinking that we are good; if we would have been bad, we would have been in some other profession by this time. We do all the assigned work, we follow agile, we automate everything, we create beautiful bug reports, we send the daily &amp;amp; weekly status, we finish the story points in time.. Well, there is more to know and keep in mind.&#xA;Believe me, everyone has got different circumstances.</description>
    </item>
    <item>
      <title>Exploratory Testing – should we or shouldn’t we?</title>
      <link>http://localhost:1313/insights/exploratory_should_we_or_shouldnt_we/</link>
      <pubDate>Tue, 08 Jan 2019 19:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/exploratory_should_we_or_shouldnt_we/</guid>
      <description>In time with need of frequent releases, test automation accelerates verification as the team needs to get quick feedback on the status of the System Under Test (SUT) for the changes done. The automation suite covers only the known. So, how we deal with the unknown?&#xA;We do so via Exploratory testing.&#xA;Why:&#xA;The challenge is to find NEW defects, not to look for the same thing over and over and over again.</description>
    </item>
  </channel>
</rss>
