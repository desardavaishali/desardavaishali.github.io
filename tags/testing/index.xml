<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Becoming a better Tester!</title>
    <link>http://localhost:1313/tags/testing/</link>
    <description>Recent content in Testing on Becoming a better Tester!</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Sep 2023 13:32:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>So, who should review a feature</title>
      <link>http://localhost:1313/blog/so-who-should-review-a-feature/</link>
      <pubDate>Sat, 09 Sep 2023 13:32:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/so-who-should-review-a-feature/</guid>
      <description>‚ÄúWhy is that even a question!?‚Äù, you wonder. Well, it very much is a question, and the answer is ‚ÄúAll stakeholders‚Äù.&#xA;The one who signed the contract The one who turned it into a high-level idea The one who approved the idea The one who made business requirements out of it The one who did design One who wireframed it The one turning it into acceptance criteria The one who built it The one who tested and signed off The one who understood the risks before giving a Go One who funded it and the one who sold it on paper These and many more stakeholders.</description>
    </item>
    <item>
      <title>Hear to discover the Unseen</title>
      <link>http://localhost:1313/insights/hearing/</link>
      <pubDate>Sun, 10 Apr 2022 18:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/hearing/</guid>
      <description>Yes, you read it right. I‚Äôm talking about ‚ÄúHearing, and not listening‚Äù. While the world is focusing on listening as a skill, I want to draw attention to hear. The basic ability of ours. While listening requires focused attention, anything you overhear can be beneficial too!&#xA;Being a tester, the information I have is never enough. I always end up seeking new details.&#xA;While I was attentive in meetings, my basic hearing ability has been of a lot of use post meetings.</description>
    </item>
    <item>
      <title>Aftermath of Production bug</title>
      <link>http://localhost:1313/blog/aftermath_of_production_bug/</link>
      <pubDate>Wed, 22 Dec 2021 21:34:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/aftermath_of_production_bug/</guid>
      <description>Yes, the aftermath. That‚Äôs where the game resumes. The update is released.. A Few days pass by fine and we suddenly start getting reports of a few things not working as we promised. ‚ÄúProduction issue‚Äù they call it.&#xA;And even before we know the root cause, the famous ritual of ‚ÄòWhy did the Tester not find it‚Äô starts.&#xA;Well the production bug could be because we missed:&#xA;some configs the redirect URLs Cache clearing after logout Time-zone consideration Performance handling Some change of a code to fix a regression issue And many more unrelated to business functionality itself.</description>
    </item>
    <item>
      <title>Are Canary Releases an Alternative to Testers?</title>
      <link>http://localhost:1313/blog/article_in_infoq/</link>
      <pubDate>Thu, 04 Nov 2021 07:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/article_in_infoq/</guid>
      <description>My first article at InfoQ is published. Thanks to Hrishikesh Barua for the review and the support.&#xA;Article URL : Are Canary Releases an Alternative to Testers?</description>
    </item>
    <item>
      <title>Intuition can&#39;t be found in tools</title>
      <link>http://localhost:1313/insights/intuition_cant_be_found_in_tools/</link>
      <pubDate>Sat, 31 Jul 2021 17:45:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/intuition_cant_be_found_in_tools/</guid>
      <description>Intuition.&#xA;We name it Intuition when : We apply gut feeling We are certain that this path is important (even if it‚Äôs not spoken of in acceptance criteria/specifications), We apply judgement - things we cannot determine directly nor measure, or even wish to go against the measure/data. We sense something is not valid when we test.&#xA;While you test, there comes a scenario, you know something is not right. You do not have the confirmation, but again your gut instinct tells you to explore further.</description>
    </item>
    <item>
      <title>Should we check static UI elements with Automation Tests</title>
      <link>http://localhost:1313/quality/should_we_check_static_ui_elements_with_automation_tests/</link>
      <pubDate>Sun, 11 Jul 2021 16:53:14 +0000</pubDate>
      <guid>http://localhost:1313/quality/should_we_check_static_ui_elements_with_automation_tests/</guid>
      <description>Recently, I came across a scenario where all the Xamarin forms for the app had an update. This resulted in issues like static text being cut off, not being visible, changes in colors for a few buttons‚Äô state, etc on different kinds of devices.&#xA;Will automation catch such changes?&#xA;Before we conclude, let‚Äôs pause and reflect - ‚ÄúIs this the purpose of automation?‚Äù ‚ÄúDo we write automation to detect such issues?</description>
    </item>
    <item>
      <title>FailQonf Ebook</title>
      <link>http://localhost:1313/activities/failqonf_ebook/</link>
      <pubDate>Sat, 05 Jun 2021 16:05:00 +0000</pubDate>
      <guid>http://localhost:1313/activities/failqonf_ebook/</guid>
      <description>It was our honor to learn from the speakers and to put together summary notes for those who would benefit from their wisdom :)&#xA;All the more reasons to check this out! üß° Session notes by myself and mindmaps by Rahul!&#xA;Grab your copy and relieve the #failqonf one more time!&#xA;Ebook URL : FailQonf Ebook</description>
    </item>
    <item>
      <title>Practical issues of implementing Conference-time advice</title>
      <link>http://localhost:1313/insights/practical_issues/</link>
      <pubDate>Thu, 31 Dec 2020 13:35:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/practical_issues/</guid>
      <description>It‚Äôs 2020, and the pandemic is going on. Everyone (at least from the IT industry) is working from home. Conferences and meetups are virtual and free to some extent or at an economical cost.&#xA;In all these forums,&#xA;We chat about testing as a craft. How to be agile, how to explore &amp;amp; Experiment, session-based testing, state-based testing, automation just checks, it‚Äôs not testing. We prefer test ideas over test cases, or we write minimal test cases.</description>
    </item>
    <item>
      <title>Awareness and Observation in Life and Testing</title>
      <link>http://localhost:1313/insights/awareness/</link>
      <pubDate>Sun, 20 Dec 2020 18:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/awareness/</guid>
      <description>Some actions/events are so natural that we do not realise if we are in the moment or not!&#xA;While repeatedly working on the same thing, that walk to the grocery store or brushing the teeth maybe or making the bed for that matter.&#xA;Does this kill awareness or observation power?&#xA;What happens once we automate the test cases/scenarios/ideas?&#xA;Do we look back? Do we regularly go through with our eyes at least once just to make sure there is nothing extra we should add even if asserts are passing?</description>
    </item>
    <item>
      <title>When the bug is &#39;non-reproducible&#39;‚Äã...</title>
      <link>http://localhost:1313/quality/when_the_bug/</link>
      <pubDate>Sun, 13 Dec 2020 11:00:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/when_the_bug/</guid>
      <description>Murphy‚Äôs Law states - ‚ÄúAnything that can go wrong, will go wrong!‚Äù - but do you know how it‚Äôs going wrong? What if it doesn‚Äôt go wrong again? What if you can‚Äôt make it go wrong again?&#xA;You find a bug, head over to the dev team and you say - ‚ÄúThis is a bug. This is not the ideal user experience. Are we okay with this behaviour? This is not as per the Acceptance criteria.</description>
    </item>
    <item>
      <title>Identify issues faster with logs!</title>
      <link>http://localhost:1313/quality/identify_issues_faster_with_logs/</link>
      <pubDate>Sat, 05 Dec 2020 14:35:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/identify_issues_faster_with_logs/</guid>
      <description>You are in the midst of exploring the mobile app when it suddenly crashes.&#xA;You don‚Äôt recollect what sequence of actions exactly made it crash. You try to remember and execute the same steps again but in vain. The app doesn‚Äôt crash anymore!&#xA;Things going on in your mind :&#xA;How would you identify what had caused the crash? What if it doesn‚Äôt crash anymore? What if you missed keeping track of the steps you performed on the system/app?</description>
    </item>
    <item>
      <title>TestFlix Talk</title>
      <link>http://localhost:1313/activities/testflix_talk/</link>
      <pubDate>Sat, 28 Nov 2020 16:55:00 +0000</pubDate>
      <guid>http://localhost:1313/activities/testflix_talk/</guid>
      <description>TestFlix was one of the kind!&#xA;TestFlix 2020 Details: Abstract &amp;amp; Details&#xA;Checkout my talk here : YouTube link</description>
    </item>
    <item>
      <title>When Devs tell you how to test their code!</title>
      <link>http://localhost:1313/quality/when_devs_tell_you/</link>
      <pubDate>Fri, 27 Nov 2020 18:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/when_devs_tell_you/</guid>
      <description>Developers pouring ideas on how to test! Sounds familiar? How does it get perceived? Does such input make you feel - Upset, responsible, frustrated, offended?&#xA;As a Tester, you might think ‚ÄúWhy should someone supervise or control on how you prepare for your task or how to do the testing?‚Äù&#xA;I find it alright if Devs or anyone from the team is suggesting how to experiment or what to Test.</description>
    </item>
    <item>
      <title>Offline Testing of an Online App - What, why and how!?</title>
      <link>http://localhost:1313/mobile-app/offline_testing_of_online_app/</link>
      <pubDate>Thu, 16 Jul 2020 14:40:00 +0000</pubDate>
      <guid>http://localhost:1313/mobile-app/offline_testing_of_online_app/</guid>
      <description>Offline testing of an online app!? If an app expects to be online, then, of course, it‚Äôll not work offline! Whatever is there to test offline!?&#xA;Like I‚Äôd written recently, Testing is much more than merely validating Business Acceptance Criteria. A Tester helps see the app from the end user‚Äôs point of view and provides feedback to improve the quality and helps polish the user experience.&#xA;Having a great experience online and offline is one of the key points of engaging users in-app.</description>
    </item>
    <item>
      <title>When Should We Stop Testing</title>
      <link>http://localhost:1313/insights/when-should-we-stop-testing/</link>
      <pubDate>Sat, 11 Jul 2020 19:30:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/when-should-we-stop-testing/</guid>
      <description>After reading this headline, you must be thinking ‚Äúwhy does one need to write an article on this! It‚Äôs straightforward - Your test cases are passed, there are no open high priority or high severity bugs, the story is signed off by PO and you are done!‚Äù&#xA;No, my friend.&#xA;There is more to this.&#xA;To ensure that the application ‚Äúmeets the requirements‚Äù and also to ensure that ‚Äúearlier requirements that were met, have not been undone‚Äù, one takes the approach of validating that the requirements of the software are known and are being met.</description>
    </item>
    <item>
      <title>Rethink how you test your API</title>
      <link>http://localhost:1313/quality/rethink_how_you_test_your_api/</link>
      <pubDate>Mon, 06 Jul 2020 20:35:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/rethink_how_you_test_your_api/</guid>
      <description>In the current digital world, with the increased demand for having everything on a click or at one‚Äôs fingertips, has forced companies to change the way they interact with or give an experience to users. The user expects real-time data at any given point of time and anywhere!&#xA;APIs bridge the gap between app/product and the backend legacy systems (including Mainframe) that most of the time maintain all the data.</description>
    </item>
    <item>
      <title>Should you build for the unhappy path?</title>
      <link>http://localhost:1313/insights/should_you_build_for_the_unhappy_path/</link>
      <pubDate>Thu, 05 Mar 2020 10:15:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/should_you_build_for_the_unhappy_path/</guid>
      <description>Why are Error scenarios more important than a happy path?&#xA;At the time of designing, developing, testing, releasing we all tend to check if a user can launch, login, navigate around, play, watch, submit and consume whatever features we have provided.&#xA;We end up giving extra focus on the happy path. Of course, it is important to set completion goals for the team and the stakeholders.&#xA;There are teams who design for a few unhappy paths too.</description>
    </item>
    <item>
      <title>Dealing with changes in requirements!</title>
      <link>http://localhost:1313/quality/dealing_with_changes/</link>
      <pubDate>Sun, 12 Jan 2020 16:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/dealing_with_changes/</guid>
      <description>This happens to everyone irrespective of the SDLC phase - mostly in the late development phase for business/customer‚Äôs benefit&amp;hellip;&#xA;General scenarios when one ends up in this situation :&#xA;You are in the middle of validating a User Story, you find some gaps considering User‚Äôs behaviour for the functionality which are leading to bugs, you check with BA/PO and they change the requirement.&#xA;OR You just signed off the story. It‚Äôs about to be released as an update.</description>
    </item>
    <item>
      <title>Going live with your app ... and then?</title>
      <link>http://localhost:1313/mobile-app/going_live_with_your_app_and_then/</link>
      <pubDate>Sun, 05 Jan 2020 13:40:00 +0000</pubDate>
      <guid>http://localhost:1313/mobile-app/going_live_with_your_app_and_then/</guid>
      <description>The mobile app market is drastically changing and everyone focuses on being noticed. After the app is launched, you have to be ready for continuous optimisation and improvement. Hence, highly frequent testing.&#xA;The QA role doesn‚Äôt stop once the app is live. Instead, the responsibilities continue in terms of regression and automation testing, signing off hotfixes and new releases - that too quicker, as customers don‚Äôt like to wait!&#xA;In the Pre-Launch phase, the business does the following :</description>
    </item>
    <item>
      <title>Mobile App Testing - Emulator/Simulators or Real Device</title>
      <link>http://localhost:1313/mobile-app/emulator_simulator_real_devices/</link>
      <pubDate>Thu, 19 Dec 2019 13:45:00 +0000</pubDate>
      <guid>http://localhost:1313/mobile-app/emulator_simulator_real_devices/</guid>
      <description>Now that everyone has a smartphone and access to many free and paid apps, users and customers expect a certain level of professional and polished behaviour on their mobile devices. They know what to expect, what their devices are capable of, and expect to be delighted in terms of user experience, stability and interactions.&#xA;With new devices getting launched every month supporting different screen sizes, different resolutions, themes, Modified OS, combinations of OS and form factors, OS version updates, new features, it gets quite difficult to provide the Quality assurance and give the sign-off.</description>
    </item>
    <item>
      <title>Releasing a build that has defects!...</title>
      <link>http://localhost:1313/insights/releasing_build_that_has_defects/</link>
      <pubDate>Sun, 06 Oct 2019 11:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/releasing_build_that_has_defects/</guid>
      <description>Sounds weird right?! QA signing off on known defects for a release!&#xA;Should it happen?&#xA;If yes, when?&#xA;If no, what might happen?&#xA;This is quite a frequent scenario in these days of quick releases, early-to-market approaches.&#xA;Also, keeping the QA position aside, one needs to understand that it is impossible to create and release new software that works 100% of the time.&#xA;Finding a defect in Production by the customer is expected, and we - as in the project team / client - already have a process around on how to deal with it.</description>
    </item>
    <item>
      <title>Why a QA should know the business domain and the architecture.</title>
      <link>http://localhost:1313/insights/why_qa_should_know_the_business_domain_architecture/</link>
      <pubDate>Sat, 21 Sep 2019 17:00:00 +0000</pubDate>
      <guid>http://localhost:1313/insights/why_qa_should_know_the_business_domain_architecture/</guid>
      <description>Whenever I get started on a new project, I first learn the business domain and the architecture, and only then start to look into the stories.&#xA;Some of the managers I worked with find it unnecessary, thinking ‚Äú What would a QA do with an understanding of the architecture?? QA should just go to User story and sign it off after validating the Acceptance Criteria (AC)‚Äù.&#xA;In my experience, knowing the architecture and the business domain helps a QA identify much more hidden errors in the whole end to end flow, can give you more understanding and confidence on the product when you know it all.</description>
    </item>
    <item>
      <title>Conducting Effective Exploratory Testing!</title>
      <link>http://localhost:1313/quality/conducting_exploratory/</link>
      <pubDate>Sun, 07 Jul 2019 17:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/conducting_exploratory/</guid>
      <description>With the interest to know more, for the curiosity to discover, we explore&amp;hellip; Roads, Code, Apps.. Exploratory testing is all about discovering the unknown. I have written before on why we should conduct exploratory testing.&#xA;Let‚Äôs discuss what to bear in mind when conducting effective Exploratory Testing!&#xA;There are quite a few misconceptions when it comes to how Exploratory testing is conducted. It‚Äôs not the same as exploring the roads. We are not wanderers when we explore the app.</description>
    </item>
    <item>
      <title>Stubs, Mocks, Virtualization ‚Äì What‚Äôs in a name!</title>
      <link>http://localhost:1313/quality/stubs_mocks_virtualisation/</link>
      <pubDate>Sat, 20 Apr 2019 18:00:30 +0000</pubDate>
      <guid>http://localhost:1313/quality/stubs_mocks_virtualisation/</guid>
      <description>Tests are specifications detailing about how to test, what to test, how much to test, how frequently to test. You derive them from Acceptance Criteria (AC).&#xA;To achieve good quality code and test coverage, we opt for TDD- Test Driven Development. You write a test for AC, then you write the code to pass that test then you write another test and repeat till the AC conditions are fulfilled!&#xA;We usually tend to verify-</description>
    </item>
    <item>
      <title>How to be a good QA!</title>
      <link>http://localhost:1313/insights/how_to_be_a_good_qa/</link>
      <pubDate>Sun, 24 Mar 2019 10:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/how_to_be_a_good_qa/</guid>
      <description>I know.. You must be thinking that we are good; if we would have been bad, we would have been in some other profession by this time. We do all the assigned work, we follow agile, we automate everything, we create beautiful bug reports, we send the daily &amp;amp; weekly status, we finish the story points in time.. Well, there is more to know and keep in mind.&#xA;Believe me, everyone has got different circumstances.</description>
    </item>
    <item>
      <title>Why should you pay for a QA when you have automated tests?</title>
      <link>http://localhost:1313/insights/why_should_you_pay_qa_when_you_have_automation/</link>
      <pubDate>Sun, 13 Jan 2019 16:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/why_should_you_pay_qa_when_you_have_automation/</guid>
      <description>Customer/Client: ‚ÄúWe are now agile. There is no QA in an agile team. Developers can do their own testing. Why should I pay for a QA? I don‚Äôt need one!‚Äù&#xA;These days Developers build automated tests and integrate code-based tests as well by using various frameworks (e.g. mocks). Some developers follow the Test Driven Development approach and code all the tests, find where their fix breaks the code, as they don‚Äôt like QA finding the defects.</description>
    </item>
    <item>
      <title>Exploratory Testing ‚Äì should we or shouldn‚Äôt we?</title>
      <link>http://localhost:1313/insights/exploratory_should_we_or_shouldnt_we/</link>
      <pubDate>Tue, 08 Jan 2019 19:00:30 +0000</pubDate>
      <guid>http://localhost:1313/insights/exploratory_should_we_or_shouldnt_we/</guid>
      <description>In time with need of frequent releases, test automation accelerates verification as the team needs to get quick feedback on the status of the System Under Test (SUT) for the changes done. The automation suite covers only the known. So, how we deal with the unknown?&#xA;We do so via Exploratory testing.&#xA;Why:&#xA;The challenge is to find NEW defects, not to look for the same thing over and over and over again.</description>
    </item>
    <item>
      <title>Service Virtualization - When integration points are a dependency for development</title>
      <link>http://localhost:1313/quality/service_virtualisation_integration_dependancy/</link>
      <pubDate>Fri, 16 Nov 2018 17:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/service_virtualisation_integration_dependancy/</guid>
      <description>Being dependent on is nothing but relying upon. One has to wait for that other thing to get the task at hand started/completed.&#xA;If Dependencies are not resolved or not made available, the task cannot be started/completed.&#xA;If dependencies are made available, much of the testing from QA &amp;amp; Dev at a component level, Unit level, can ‚Äúshift left,‚Äù or be moved earlier in the SDLC. This is because each component can be tested individually instead of waiting for complete assembly.</description>
    </item>
    <item>
      <title>Why Acceptance Criteria!</title>
      <link>http://localhost:1313/quality/why_acceptance_criteria/</link>
      <pubDate>Sun, 11 Nov 2018 17:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/why_acceptance_criteria/</guid>
      <description>The Final product should work as expected.&#xA;Everyone wants to create the product that customers (and their customers) love. The product should be:&#xA;As per customer‚Äôs expectation - Solution Fit &amp;amp; Market Fit Defect-free Early to market / without delays Within budget Changes post-go-live should be based on further feedback from customers Is it possible to achieve all above? Yes - With the help of acceptance criteria!!&#xA;Acceptance criteria =</description>
    </item>
    <item>
      <title>Finding Defects V s Preventing Defects</title>
      <link>http://localhost:1313/quality/finding_defects_preventing_defects/</link>
      <pubDate>Wed, 07 Nov 2018 17:30:00 +0000</pubDate>
      <guid>http://localhost:1313/quality/finding_defects_preventing_defects/</guid>
      <description>Finding defects involves verifying after the software is created. Fixing defects involves re-doing the faulty code and then re-testing everything to ensure that the fix is in place and that nothing else got broken. This takes time and money. Preventing defects is easier, and needn&amp;rsquo;t take a lot of upfront analysis either if certain practices are followed.&#xA;Prevention is better than cure. Preventing the defects before the product is built (coding phase) helps deliver business value earlier.</description>
    </item>
  </channel>
</rss>
